import  datetime
from    decouple import config # NB remove + config(api) will be replaced with github secrets
import  pandas as pd
from    pandas.tseries.offsets import DateOffset
import  pprint
import  requests
import  sys

def github_request():
    for x in sys.argv[1:]: # for arguments for secrets
      print(x)  
    # Make api request with Github credential token
    headers = {'Authorization': 'token ' + config('api')}
    response = requests.get('https://api.github.com/users/Nkosinathi-Bonga-James-Mncube/repos',headers=headers)
    create_dataframe(response)
    
def create_dataframe(response): # Sort json value from key in API get request
    project_name = [k['full_name'] for k in response.json() if not k['fork'] == True]
    project_created = [k['created_at'] for k in response.json() if not k['fork'] == True]
    project_id = [k['id'] for k in response.json() if not k['fork'] == True]
    project_url = [k['html_url'] for k in response.json() if not k['fork'] == True]
    
    # Create a dictionary from json values 
    data_df = {
                'Project_name':project_name,
                'Created_at':project_created,
                'Id':project_id,
                'html_url':project_url
    }
    display_repos(data_df)

def fail_msg(df):
  txt_file = open('src/ascii.txt','r')
  print(f'{txt_file.read()}\nNo new project :( Please contribute more and make public!')
  x=datetime.datetime.now()
  print(f'\nPast record for {x.year}:\n')
  each_repo = df.loc[df['Created_at'].dt.year==x.year].values
  for k in each_repo:
    print(f'{k[1]} {k[3]}')
    
def display_repos(data_df):
    # Create dataframe based on dictionary
    df=pd.DataFrame(data_df,columns=['Project_name','Created_at','Id','html_url'])
    df.sort_values(by=['Created_at'],inplace=True,ascending=False)
    df['Created_at']= pd.to_datetime(df['Created_at']) # convert to Date.time.object
    # print(df) # debug
    x=datetime.datetime.now()+ pd.DateOffset(months=-1) # check previous month (i.e -1)
    # x=datetime.date.fromisoformat('2020-08-24')+ pd.DateOffset(months=-1) # debug
    each_repo = df.loc[df['Created_at'].dt.month==x.month].values # find all dates with the previous month in series Created_at
    print(f'------------------------------------------\nLatest project for {x.strftime("%b")}-{x.year} \n------------------------------------------')
    print(f'You have a total of {each_repo.shape[0]} new Projects:\n') # return number of total turples with is total number of projects
    for k in each_repo:
      print(f'{k[0]} {k[3]}')
    if each_repo.size == 0:                    
      fail_msg(df)
    print(f'------------------------------------------\nThis report is generated by my own project at : https://github.com/Nkosinathi-Bonga-James-Mncube/Linkedin_post_automation\n------------------------------------------')

github_request()
